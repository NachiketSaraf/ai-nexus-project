{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CategoryService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080'; // Replace with your backend URL\n  }\n\n  getCategoryNames() {\n    return this.http.get(`${this.baseUrl}/categories/all`).pipe(map(response => response));\n  }\n  static #_ = this.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","CategoryService","constructor","http","baseUrl","getCategoryNames","get","pipe","response","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\ai-nexus-project\\ai-nexus-project\\ai-nexus-UI\\nexus-ui\\src\\app\\service\\category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable ,map } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n  private baseUrl = 'http://localhost:8080'; // Replace with your backend URL\r\n  constructor(private http: HttpClient) { }\r\n  getCategoryNames(): Observable<string[]> {\r\n    return this.http.get(`${this.baseUrl}/categories/all`).pipe(\r\n      map((response: any) => response as string[]));\r\n  }\r\n  \r\n}\r\n// http://localhost:8080/tools/all\r\n// http://localhost:8080/categories/all-name"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAItC,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EACH;;EACxCC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,iBAAiB,CAAC,CAACG,IAAI,CACzDP,GAAG,CAAEQ,QAAa,IAAKA,QAAoB,CAAC,CAAC;EACjD;EAAC,QAAAC,CAAA,G;qBANUR,eAAe,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfb,eAAe;IAAAc,OAAA,EAAfd,eAAe,CAAAe,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}