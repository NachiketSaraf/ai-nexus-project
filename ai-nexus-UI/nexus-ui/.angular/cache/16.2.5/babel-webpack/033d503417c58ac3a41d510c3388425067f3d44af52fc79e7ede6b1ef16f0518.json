{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CardService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080'; // Replace with your backend URL\n  }\n  // categoryName : CategoryComponent.selectedCategory;\n  getCard(categoryName) {\n    return this.http.get(`${this.baseUrl}/tools/nameAndDescription/${categoryName}`).pipe(map(response => response));\n  }\n  static #_ = this.ɵfac = function CardService_Factory(t) {\n    return new (t || CardService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CardService,\n    factory: CardService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","CardService","constructor","http","baseUrl","getCard","categoryName","get","pipe","response","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\ai-nexus-project\\ai-nexus-project\\ai-nexus-UI\\nexus-ui\\src\\app\\service\\card.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable , map} from 'rxjs';\r\nimport { CategoryComponent } from '../category/category.component';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CardService {\r\n  \r\n  private baseUrl = 'http://localhost:8080'; // Replace with your backend URL\r\n  constructor(private http: HttpClient) {}\r\n  // categoryName : CategoryComponent.selectedCategory;\r\n  \r\n  \r\n    getCard(categoryName :string ): Observable<string[]>{\r\n      return this.http.get(`${this.baseUrl}/tools/nameAndDescription/${categoryName}`) .pipe(\r\n        map((response: any) => response as string[]));\r\n    }\r\n   \r\n}\r\n// .pipe(): The .pipe() method is commonly used in functional programming and is often associated with libraries like RxJS for handling asynchronous operations. It allows you to create a chain of data processing steps.\r\n\r\n// map(): The map() function is used to transform the data within the data stream. In this context, it's being used as a method applied to a stream of data. It takes a function as an argument, and for each item in the data stream, it applies this function to transform the item.\r\n\r\n// (response: any) => response as string[]: This is the function provided to the map() method. It takes a parameter response of type any and casts it as an array of strings (string[]). This means it's expecting the response to be an array, and it's explicitly stating that it should be treated as an array of strings."],"mappings":"AAEA,SAAsBA,GAAG,QAAO,MAAM;;;AAOtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;EACJ;EACvC;EAGEC,OAAOA,CAACC,YAAoB;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,OAAO,6BAA6BE,YAAY,EAAE,CAAC,CAAEE,IAAI,CACpFR,GAAG,CAAES,QAAa,IAAKA,QAAoB,CAAC,CAAC;EACjD;EAAC,QAAAC,CAAA,G;qBAVQT,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXd,WAAW;IAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}